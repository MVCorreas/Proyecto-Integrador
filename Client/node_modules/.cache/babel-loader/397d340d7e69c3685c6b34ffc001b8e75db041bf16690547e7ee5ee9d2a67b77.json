{"ast":null,"code":"import { ADD_FAV, CLEAN_DETAIL, FILTER, GET_CHARACTER_DETAIL, ORDER, REMOVE_FAV } from './actions';\nconst initialState = {\n  myFavorites: [],\n  characterDetail: {},\n  allCharacters: []\n};\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // case ADD_FAV:\n    //   return {...state, allCharacters: [...state.allCharacters, action.payload], myFavorites: [...state.myFavorites, action.payload]};\n    case ADD_FAV:\n      return {\n        ...state,\n        myFavorites: payload,\n        allCharacters: payload\n      };\n    case REMOVE_FAV:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(character => character.id !== +action.payload)\n      };\n    //o parseInt(action.payload) o Number(action.payload)\n    case GET_CHARACTER_DETAIL:\n      return {\n        ...state,\n        characterDetail: action.payload\n      };\n    case CLEAN_DETAIL:\n      return {\n        ...state,\n        characterDetail: {}\n      };\n    case FILTER:\n      let {\n        allCharacters\n      } = state;\n      const filterValue = action.payload;\n      if (filterValue === 'All Favorites') {\n        return {\n          ...state,\n          myFavorites: allCharacters\n        };\n      } else {\n        const filteredCharacters = state.allCharacters.filter(character => character.gender === filterValue);\n        return {\n          ...state,\n          myFavorites: filteredCharacters\n        };\n      }\n    case ORDER:\n      const sortedCharacters = state.myFavorites.slice().sort((a, b) => {\n        //slice guarda los cambios del sort en un arreglo, sino solamente se cambiar y organizan pero no se deuelven los cambios \n        if (action.payload === 'A') {\n          return a.id - b.id;\n        } else {\n          return b.id - a.id;\n        }\n      });\n      return {\n        ...state,\n        myFavorites: sortedCharacters\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ADD_FAV","CLEAN_DETAIL","FILTER","GET_CHARACTER_DETAIL","ORDER","REMOVE_FAV","initialState","myFavorites","characterDetail","allCharacters","rootReducer","state","action","type","payload","filter","character","id","filterValue","filteredCharacters","gender","sortedCharacters","slice","sort","a","b"],"sources":["/Users/vickycorreas/Desktop/Programación/HENRY/HENRY Students/Proyecto-Integrador/rick_and_morty/Client/src/redux/reducer.js"],"sourcesContent":["\nimport { ADD_FAV, CLEAN_DETAIL, FILTER, GET_CHARACTER_DETAIL, ORDER, REMOVE_FAV } from './actions';\n\nconst initialState = {\n    myFavorites: [],\n    characterDetail: {},\n    allCharacters: []\n};\n\nexport const rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n      // case ADD_FAV:\n      //   return {...state, allCharacters: [...state.allCharacters, action.payload], myFavorites: [...state.myFavorites, action.payload]};\n      case ADD_FAV:\n        return { ...state, myFavorites: payload, allCharacters: payload };  \n      \n      case REMOVE_FAV:\n        return {...state, myFavorites: state.myFavorites.filter((character) => character.id !== +action.payload)} //o parseInt(action.payload) o Number(action.payload)\n      case GET_CHARACTER_DETAIL:\n        return {...state,characterDetail: action.payload};\n      case CLEAN_DETAIL:\n        return {...state, characterDetail: {}};\n      case FILTER:\n        let { allCharacters } = state;\n      const filterValue = action.payload;\n\n      if (filterValue === 'All Favorites') {\n        return { ...state, myFavorites: allCharacters };\n      } else {\n        const filteredCharacters = state.allCharacters.filter(\n          (character) => character.gender === filterValue\n        );\n        return { ...state, myFavorites: filteredCharacters };\n      }\n      case ORDER:\n        const sortedCharacters = state.myFavorites.slice().sort((a, b) => { //slice guarda los cambios del sort en un arreglo, sino solamente se cambiar y organizan pero no se deuelven los cambios \n          if (action.payload === 'A') {\n            return a.id - b.id;\n          } else {\n            return b.id - a.id;\n          }\n        });\n        return {\n          ...state,\n          myFavorites: sortedCharacters\n        };\n      default:\n        return state;\n    }\n};"],"mappings":"AACA,SAASA,OAAO,EAAEC,YAAY,EAAEC,MAAM,EAAEC,oBAAoB,EAAEC,KAAK,EAAEC,UAAU,QAAQ,WAAW;AAElG,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,eAAe,EAAE,CAAC,CAAC;EACnBC,aAAa,EAAE;AACnB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EACzD,QAAQA,MAAM,CAACC,IAAI;IACjB;IACA;IACA,KAAKb,OAAO;MACV,OAAO;QAAE,GAAGW,KAAK;QAAEJ,WAAW,EAAEO,OAAO;QAAEL,aAAa,EAAEK;MAAQ,CAAC;IAEnE,KAAKT,UAAU;MACb,OAAO;QAAC,GAAGM,KAAK;QAAEJ,WAAW,EAAEI,KAAK,CAACJ,WAAW,CAACQ,MAAM,CAAEC,SAAS,IAAKA,SAAS,CAACC,EAAE,KAAK,CAACL,MAAM,CAACE,OAAO;MAAC,CAAC;IAAC;IAC5G,KAAKX,oBAAoB;MACvB,OAAO;QAAC,GAAGQ,KAAK;QAACH,eAAe,EAAEI,MAAM,CAACE;MAAO,CAAC;IACnD,KAAKb,YAAY;MACf,OAAO;QAAC,GAAGU,KAAK;QAAEH,eAAe,EAAE,CAAC;MAAC,CAAC;IACxC,KAAKN,MAAM;MACT,IAAI;QAAEO;MAAc,CAAC,GAAGE,KAAK;MAC/B,MAAMO,WAAW,GAAGN,MAAM,CAACE,OAAO;MAElC,IAAII,WAAW,KAAK,eAAe,EAAE;QACnC,OAAO;UAAE,GAAGP,KAAK;UAAEJ,WAAW,EAAEE;QAAc,CAAC;MACjD,CAAC,MAAM;QACL,MAAMU,kBAAkB,GAAGR,KAAK,CAACF,aAAa,CAACM,MAAM,CAClDC,SAAS,IAAKA,SAAS,CAACI,MAAM,KAAKF,WACtC,CAAC;QACD,OAAO;UAAE,GAAGP,KAAK;UAAEJ,WAAW,EAAEY;QAAmB,CAAC;MACtD;IACA,KAAKf,KAAK;MACR,MAAMiB,gBAAgB,GAAGV,KAAK,CAACJ,WAAW,CAACe,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAAE;QAClE,IAAIb,MAAM,CAACE,OAAO,KAAK,GAAG,EAAE;UAC1B,OAAOU,CAAC,CAACP,EAAE,GAAGQ,CAAC,CAACR,EAAE;QACpB,CAAC,MAAM;UACL,OAAOQ,CAAC,CAACR,EAAE,GAAGO,CAAC,CAACP,EAAE;QACpB;MACF,CAAC,CAAC;MACF,OAAO;QACL,GAAGN,KAAK;QACRJ,WAAW,EAAEc;MACf,CAAC;IACH;MACE,OAAOV,KAAK;EAChB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}